from inits.logger import bot_logger
from utils.user_utils import get_user_level
from utils.security import crypt
from functools import wraps
from typing import Callable
from aiogram import Router, types
from aiogram.filters import Filter, Command


def log_filter_result(
        command: str,
        username: str,
        user_firstname: str,
        chat_title: str,
        chat_type: str,
        filter_name: str,
        result: bool,
        user_level: int = None):
    status = 'üü°' if result else 'üî¥'
    user_info = (f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_firstname}) –≤ —á–∞—Ç–µ '
                 f'{chat_title} ({chat_type}).')
    level_info = f' –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_level}.' \
        if user_level is not None else ''
    bot_logger.debug(
        f'{status}–ö–æ–º–∞–Ω–¥–∞ "/{command}": –§–∏–ª—å—Ç—Ä {filter_name}: '
        f'–¥–æ—Å—Ç—É–ø {"—Ä–∞–∑—Ä–µ—à–µ–Ω" if result else "–∑–∞–ø—Ä–µ—â–µ–Ω"}.\n'
        f'{user_info}{level_info}'
    )


def security_filters(router: Router, command: str, *filters: Filter):
    def decorator(handler: Callable):
        @wraps(handler)
        async def wrapper(message: types.Message):
            username = message.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            user_firstname = message.from_user.first_name
            chat_title = message.chat.title or f'–ª–∏—á–Ω—ã–π —á–∞—Ç ({message.chat.id})'
            user_id = message.from_user.id
            for filter_ in filters:
                if not await filter_(
                        message,
                        command,
                        username,
                        user_id,
                        user_firstname,
                        chat_title
                ):
                    return

            bot_logger.debug(
                f'üü¢–ö–æ–º–∞–Ω–¥–∞ "/{command}":\n'
                f'–í—Å–µ security_filters –¥–ª—è {username} –ø—Ä–æ–π–¥–µ–Ω—ã'
            )
            return await handler(message)

        router.message.register(wrapper, Command(command))
        return handler

    return decorator


class ChatTypesFilter(Filter):
    def __init__(self, chat_types: list[str]) -> None:
        self.chat_types = chat_types

    async def __call__(
            self,
            message: types.Message,
            command: str,
            username: str,
            user_id: int,
            user_firstname: str,
            chat_title: str
    ) -> bool:
        result = message.chat.type in self.chat_types
        if not result:
            await message.answer(f'–ö–æ–º–∞–Ω–¥–∞ /{command} –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ '
                                 f'—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–∞—Ö —á–∞—Ç–æ–≤: '
                                 f'{", ".join(self.chat_types)}.')
        log_filter_result(
            command,
            username,
            user_firstname,
            chat_title,
            message.chat.type,
            'ChatTypesFilter', result
        )
        return result


class UserLevelFilter(Filter):
    def __init__(
            self,
            min_level: int,
            max_level: int,
            filter_name: str
    ) -> None:
        self.min_level = min_level
        self.max_level = max_level
        self.filter_name = filter_name

    async def __call__(
            self,
            message: types.Message,
            command: str, username: str,
            user_id: int, user_firstname: str,
            chat_title: str
    ) -> bool:
        user_level = await get_user_level(crypt(user_id))
        result = (user_level
                  is not None and
                  self.min_level <= user_level <= self.max_level)
        if not result:
            if user_level is None:
                await message.answer(f'–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /{command} '
                                     f'–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. '
                                     f'–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
            else:
                await message.answer(f'–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /{command} '
                                     f'–Ω–µ–æ–±—Ö–æ–¥–∏–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ '
                                     f'–æ—Ç {self.min_level} –¥–æ {self.max_level}'
                                     f'. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}.')
        log_filter_result(
            command,
            username,
            user_firstname,
            chat_title,
            message.chat.type,
            self.filter_name,
            result,
            user_level
        )
        return result


class IsAnonymousUser(Filter):
    async def __call__(
            self,
            message: types.Message,
            command: str, username: str,
            user_id: int,
            user_firstname: str,
            chat_title: str) -> bool:
        if message.from_user.is_bot or message.from_user.id is None:
            bot_logger.debug(
                f'üü°–ö–æ–º–∞–Ω–¥–∞ "/{command}": –§–∏–ª—å—Ç—Ä '
                f'IsAnonymousUser: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–æ–Ω–∏–º–µ–Ω –∏–ª–∏ –±–æ—Ç.\n'
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_firstname}) –≤ '
                f'—á–∞—Ç–µ {chat_title}.'
            )
            await message.answer(f'–ö–æ–º–∞–Ω–¥–∞ /{command} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è '
                                 f'–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –±–æ—Ç–æ–≤.')
            return False
        return True


group_and_private_router = Router()
common_filters = [
    ChatTypesFilter(['group', 'supergroup', 'channel', 'private']),
    IsAnonymousUser(),
    UserLevelFilter(0, 15, 'IsAuthUser')
]


@security_filters(
    group_and_private_router,
    'id',
    *common_filters)
async def show_id(message: types.Message):
    bot_logger.debug('–û—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è id')
    await message.answer(f'–í–∞—à id: {message.from_user.id}, '
                         f'id —á–∞—Ç–∞: {message.chat.id}, '
                         f'id —Ç–µ–º—ã: {message.message_thread_id}')
