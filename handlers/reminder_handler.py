from aiogram import Bot, F
from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from datetime import datetime

from utils.states import ReminderForm
from inits.api_client import api_ov_client
from inits.logger import bot_logger
from config import endpoint_reminder
from utils.reminder_func import days_or_months, extract_time_intervals
from keyboards.kb_reply import get_keyboard
from filters.chat_types import (
    UserLevelFilter,
    ChatTypesFilter,
    security_filters
)
from utils.security import crypt


reminder_router = Router()
common_filters = [
    ChatTypesFilter(['group', 'supergroup', 'channel', 'private']),
    UserLevelFilter(0, 15, 'IsAuthUser')
]


REMINDER_KB = get_keyboard(
    '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    '‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    '‚ñ™ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    '‚ñ™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
    'üóë –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    '‚≠ïÔ∏è –í—ã—Ö–æ–¥',
    placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    sizes=(2, 2, 2),
)


EXIT_KB = get_keyboard('‚≠ïÔ∏è –í—ã—Ö–æ–¥', sizes=(2, 1, 1),)


@reminder_router.message(F.text == '‚≠ïÔ∏è –í—ã—Ö–æ–¥')
async def exit_keyboard(message: types.Message, state: FSMContext):
    await message.answer(
        '–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é.',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()


@reminder_router.message(Command('reminder'))
async def get_bat(message: types.Message, bot: Bot):
    chat_type = message.chat.type
    await message.delete()

    if message.text in [
        '‚ñ™ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        '‚ñ™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
        'üóë –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
    ]:
        await bot.send_message(
            message.from_user.id,
            '–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?',
            reply_markup=REMINDER_KB
        )
        bot_logger.info(f'üî¢–ó–∞–ø—É—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    elif message.text in [
        '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        '‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
    ]:
        await bot.send_message(
            message.from_user.id,
            '–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:',
            reply_markup=REMINDER_KB
        )
        bot_logger.info(f'üî¢–ó–∞–ø—É—â–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    elif chat_type in ['group', 'supergroup']:
        await bot.send_chat_action(message.chat.id, 'typing')
        await bot.send_message(
            message.from_user.id,
            '–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é:',
            reply_markup=REMINDER_KB
        )
        bot_logger.info(f'üî¢–ó–∞–ø—É—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ')
    else:
        await bot.send_message(
            message.from_user.id,
            '–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?',
            reply_markup=REMINDER_KB
        )
        bot_logger.info(f'üî¢–ó–∞–ø—É—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ')


@reminder_router.message(F.text == '‚ñ™ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def add_reminder(message: types.Message, state: FSMContext):
    await add_name_reminder(message, state)
    await message.answer('___________', reply_markup=EXIT_KB)


async def add_name_reminder(message: types.Message, state: FSMContext):
    await state.set_state(ReminderForm.name_reminder)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:')


@reminder_router.message(ReminderForm.name_reminder)
async def add_text_reminder(message: types.Message, state: FSMContext):
    await state.update_data(name_reminder=message.text)
    await state.set_state(ReminderForm.text_reminder)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:')


@reminder_router.message(ReminderForm.text_reminder)
async def add_reminder_repeat(message: types.Message, state: FSMContext):
    await state.update_data(text_reminder=message.text)
    await state.set_state(ReminderForm.reminder_days)
    await choose_days(message, state)


@reminder_router.message(ReminderForm.reminder_days)
async def choose_days(message: types.Message, state: FSMContext):
    await message.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–Ω—å (–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å), '
        '–∫–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏–ª–∏ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞: ',
        reply_markup=EXIT_KB
    )
    await state.set_state(ReminderForm.choose_time)


@reminder_router.message(ReminderForm.choose_time)
async def choose_time(message: types.Message, state: FSMContext):
    reminder_day = message.text
    days, month_day = days_or_months(reminder_day)
    await state.update_data(days=days)
    await state.update_data(month_day=month_day)
    await state.set_state(ReminderForm.add_db_reminder_time)
    await message.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 10-12 –∏–ª–∏ 12:00',
        reply_markup=EXIT_KB
    )


@reminder_router.message(ReminderForm.add_db_reminder_time)
async def add_db_reminder_time(message: types.Message, state: FSMContext):
    await state.set_state(ReminderForm.choose_time)
    await state.update_data(choose_time=message.text)
    try:
        data = await state.get_data()

        api_data = {
            'reminder_nickname': '',
            'name_reminder': '',
            'text_reminder': '',
            'days_repeat': {
                'days_week': [],
                'month_days': [],
                'time_repeat': []
            },
            'owner_reminder_id': ''
        }

        nickname = (str(message.from_user.first_name) + ' '
                    + str(message.from_user.last_name))
        api_data['reminder_nickname'] = data.get('name_reminder', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        api_data['name_reminder'] = data.get(
            'name_reminder',
            '—Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–ª–∏'
        )
        api_data['text_reminder'] = data.get(
            'text_reminder',
            '—Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–ª–∏'
        )
        api_data['days_repeat']['month_days'] = data.get('month_day', [])
        api_data['days_repeat']['days_week'] = data.get('days', [])
        api_data['days_repeat']['time_repeat'] = extract_time_intervals(
            data.get('choose_time', [])
        )
        api_data['owner_reminder_id'] = crypt(message.from_user.id)
        api_data['reminder_nickname'] = nickname
        reminder = await api_ov_client.post(endpoint_reminder, api_data)
        today = datetime.utcnow()
        await message.answer(
            '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
            reply_markup=REMINDER_KB
        )
        await state.clear()
        await message.answer(
            f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{reminder.get("id")}:\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {api_data["name_reminder"]}\n'
            f'–¢–µ–∫—Å—Ç: {api_data["text_reminder"]}\n'
            f'–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {today}\n'
            f'–°–æ–∑–¥–∞—Ç–µ–ª—å: '
            f'{reminder.get("reminder_nickname", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}'
            f'___________')

    except ValueError as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {e}. '
                             f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ '
                             f'–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.')
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}')


@reminder_router.message(F.text == '‚ñ™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
async def show_reminders(message: types.Message, bot: Bot):
    await message.delete()
    try:
        reminders_response = await api_ov_client.get(
            f'{endpoint_reminder}?owner_reminder_id={crypt(message.from_user.id)}')
        if reminders_response and reminders_response.get('results'):
            reminders = reminders_response['results']
            bot_message = '‚¨áÔ∏è–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:‚¨áÔ∏è\n\n'
            for reminder in reminders:
                chats = reminder.get('chats_names_active', [])
                if chats:
                    chats_str = ', '.join(chats)
                    status = 'üü¢'
                else:
                    chats_str = ' –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤'
                    status = 'üî¥'

                bot_message += f'‚Ññ{reminder.get("id")}:{reminder.get("name_reminder")} \n' \
                               f'–ß–∞—Ç—ã:{status} {chats_str}\n' \
                               f'„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n'
            await bot.send_message(message.from_user.id, bot_message)
        else:
            await bot.send_message(message.from_user.id,
                                   'üò±–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
    except Exception as e:
        await bot.send_message(message.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@reminder_router.message(F.text == 'üóë –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def delete_reminder_command(message: types.Message, state: FSMContext):
    await state.set_state(ReminderForm.delete_reminder_id)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:')


@reminder_router.message(ReminderForm.delete_reminder_id)
async def handle_delete_reminder_id(message: types.Message, state: FSMContext):
    try:
        reminder_id = int(message.text)
        reminder = await api_ov_client.get(f"{endpoint_reminder}{reminder_id}/")
        if reminder['owner_reminder_id'] == crypt(message.from_user.id):
            await api_ov_client.delete(endpoint_reminder, reminder_id)
            await message.answer(
                f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å ID {reminder_id} —É—Å–ø–µ—à–Ω–æ '
                f'—É–¥–∞–ª–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
            await state.clear()
        else:
            await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ'
                                 ' –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ '
                                 '—É–¥–∞–ª–∏—Ç—å.', reply_markup=EXIT_KB)
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ '
                             '–≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É '
                             '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –í—ã—Ö–æ–¥', reply_markup=EXIT_KB)
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ '
                             f'–æ—à–∏–±–∫–∞: {e}', reply_markup=EXIT_KB)


@reminder_router.message(F.text == '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def start_reminder_command(message: types.Message, state: FSMContext):
    await state.set_state(ReminderForm.start_reminder_id)
    await message.answer('‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å:')


@reminder_router.message(ReminderForm.start_reminder_id)
async def handle_start_reminder_id(message: types.Message, state: FSMContext):
    try:
        reminder_id = int(message.text)
        reminder= await api_ov_client.get(f'{endpoint_reminder}{reminder_id}/')
        if reminder['owner_reminder_id'] == crypt(message.from_user.id):
            chat_id = crypt(message.chat.id) + '_' + str(message.message_thread_id)
            chat_name = message.chat.title if (
                message.chat.title) else f'{message.from_user.first_name}'

            api_data = {
                'chats_id_active': reminder.get('chats_id_active', []) + [
                    chat_id],
                'status_reminder': True,
                'chats_names_active': reminder.get('chats_names_active',
                                                   []) + [chat_name]
            }
            await api_ov_client.patch(endpoint_reminder, api_data, reminder_id)

            await message.answer(f'‚ñ∂Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å '
                                 f'ID {reminder_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ '
                                 f'–≤ —á–∞—Ç–µ {chat_name}.')
            await state.clear()
        else:
            await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º '
                                 '—ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–µ '
                                 '–º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å.')
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. '
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
                             reply_markup=EXIT_KB)
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ '
                             f'–æ—à–∏–±–∫–∞: {e}',
                             reply_markup=EXIT_KB)


@reminder_router.message(F.text == '‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def stop_reminder_command(message: types.Message, state: FSMContext):
    await state.set_state(ReminderForm.stop_reminder_id)
    await message.answer('‚è∏ –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:')


@reminder_router.message(ReminderForm.stop_reminder_id)
async def handle_stop_reminder_id(message: types.Message, state: FSMContext):
    try:
        reminder_id = int(message.text)
        chat_id = str(message.chat.id) + '_' + str(message.message_thread_id)
        reminder = await api_ov_client.get(f'{endpoint_reminder}{reminder_id}/')
        if reminder['owner_reminder_id'] == crypt(message.from_user.id):
            chats_id_active = reminder.get('chats_id_active', [])
            chats_names_active = reminder.get('chats_names_active', [])
            if chat_id in chats_id_active:
                chats_id_active.remove(chat_id)
            chat_name = message.chat.title if (
                message.chat.title) else f'{message.from_user.first_name}'
            if chat_name in chats_names_active:
                chats_names_active.remove(chat_name)
            api_data = {
                'chats_id_active': chats_id_active,
                'status_reminder': len(chats_id_active) > 0,
                'chats_names_active': chats_names_active
            }
            await api_ov_client.patch(endpoint_reminder, api_data, reminder_id)
            await message.answer(f'‚è∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å'
                                 f' ID {reminder_id} —É—Å–ø–µ—à–Ω–æ'
                                 f' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')
            await state.clear()
        else:
            await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º '
                                 '—ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–µ '
                                 '–º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.')
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. '
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
                             reply_markup=EXIT_KB)
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ '
                             f'–æ—à–∏–±–∫–∞: {e}',
                             reply_markup=EXIT_KB)
